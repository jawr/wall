// Package utils provides generic functions that can be used around the system.
package utils

import (
	"encoding/json"
	"fmt"
	"time"
)

// Trace is meant to be used in conjunction with Un and is used to time a function
// using the defer functionality.
func Trace(desc string) (string, time.Time) {
	return desc, time.Now()
}

// Un takes time.Time as an argument (usually generated by Trace()) and on defer
// calculates the time since it's input and prints this out.
func Un(desc string, t time.Time) {
	elapsed := time.Since(t)
	fmt.Printf("%s: %s\n", desc, elapsed.String())
}

// ToJSON marshals a struct into JSON without returning any errors (returns an empty
// json object if it errors. WARNING, panics for debug purposes.
func ToJSON(i interface{}) []byte {
	b, err := json.Marshal(i)
	if err != nil {
		return []byte("{}")
	}
	return b
}
func FilterIN(sl []string) []string {
	fn := func(s string) bool {
		if s == "in" {
			return true
		}
		return false
	}
	return filter(sl, fn)
}

func filter(sl []string, fn func(string) bool) []string {
	outi := 0
	res := sl
	for _, v := range sl {
		if !fn(v) {
			res[outi] = v
			outi++
		}
	}
	return res[0:outi]
}
